Git Commands Overview

1. git init
   - Purpose: Initializes a new Git repository in the current directory.
   - Use Case: When starting a new project or converting an existing project into a Git repository.
   - Syntax:
     git init
   - Example:
     cd my-project
     git init

2. git add
   - Purpose: Stages changes (new files, modifications, or deletions) for the next commit.
   - Use Case: To prepare files for committing.
   - Syntax:
     git add <file>
     git add .
   - Example:
     git add frontend/src/App.js
     git add .

3. git commit
   - Purpose: Records the staged changes in the repository's history.
   - Use Case: To save a snapshot of your project.
   - Syntax:
     git commit -m "Commit message"
   - Example:
     git commit -m "Add frontend folder and update .gitignore"

4. git commit (single file)
   - Purpose: Records changes to a specific file in the repository's history.
   - Use Case: To save a snapshot of a single file with a descriptive message.
   - Syntax:
     git commit <file-path> -m "<commit-message>"
   - Example:
     git commit app.js -m "Update app.js for server configuration"

5. git status
   - Purpose: Displays the state of the working directory and staging area.
   - Use Case: To check which files are staged, modified, or untracked.
   - Syntax:
     git status
   - Example:
     git status

6. git log
   - Purpose: Shows the commit history.
   - Use Case: To view past commits and their details.
   - Syntax:
     git log
     git log --oneline
   - Example:
     git log --oneline

7. git branch
   - Purpose: Lists, creates, or deletes branches.
   - Use Case: To manage branches in your repository.
   - Syntax:
     git branch
     git branch <branch-name>
     git branch -d <branch-name>
   - Example:
     git branch feature-login
     git branch -d old-branch

8. git checkout
   - Purpose: Switches to a different branch or commit.
   - Use Case: To work on a specific branch or revert to a previous commit.
   - Syntax:
     git checkout <branch-name>
     git checkout <commit-hash>
   - Example:
     git checkout main
     git checkout 39f3e38

9. git merge
   - Purpose: Combines changes from one branch into another.
   - Use Case: To integrate features or bug fixes into the main branch.
   - Syntax:
     git merge <branch-name>
   - Example:
     git merge feature-login

10. git remote
   - Purpose: Manages connections to remote repositories.
   - Use Case: To add, remove, or view remote repositories.
   - Syntax:
     git remote add <name> <url>
     git remote -v
   - Example:
     git remote add origin https://github.com/username/repo.git
     git remote -v

11. git push
    - Purpose: Uploads local commits to a remote repository.
    - Use Case: To share your changes with others.
    - Syntax:
      git push <remote> <branch>
      git push -u <remote> <branch>
    - Example:
      git push origin main

12. git pull
    - Purpose: Fetches and merges changes from a remote repository into the current branch.
    - Use Case: To update your local branch with the latest changes from the remote.
    - Syntax:
      git pull <remote> <branch>
    - Example:
      git pull origin main

13. git clone
    - Purpose: Creates a local copy of a remote repository.
    - Use Case: To start working on an existing project.
    - Syntax:
      git clone <url>
    - Example:
      git clone https://github.com/username/repo.git

14. git reset
    - Purpose: Unstages changes or resets the repository to a previous state.
    - Use Case: To undo changes in the staging area or working directory.
    - Syntax:
      git reset <file>
      git reset --hard
    - Example:
      git reset HEAD~1
      git reset --hard

15. git rebase
    - Purpose: Reapplies commits on top of another base commit.
    - Use Case: To clean up commit history or integrate changes.
    - Syntax:
      git rebase <branch>
      git rebase -i HEAD~N
    - Example:
      git rebase -i HEAD~3

16. git stash
    - Purpose: Temporarily saves uncommitted changes.
    - Use Case: To switch branches without committing changes.
    - Syntax:
      git stash
      git stash apply
    - Example:
      git stash
      git stash apply

17. git config --global core.autocrlf true
    - Purpose: Configures Git to handle line-ending conversions automatically between different operating systems.
    - Use Case: Ensures consistent line endings in the repository when working across Windows, Linux, and macOS. On Windows, line endings are typically CRLF, while on Linux/macOS, they are LF. This setting ensures:
      - Files are checked out with CRLF line endings on Windows.
      - Files are committed with LF line endings, maintaining consistency in the repository.
    - Syntax:
      git config --global core.autocrlf true
    - Example:
      Run this command to enable automatic line-ending conversion globally for all repositories on your system:
      git config --global core.autocrlf true
    - When to Use:
      - Use this command if you are working on a Windows system and collaborating with others who use Linux or macOS.
      - It prevents unnecessary changes in line endings from being detected as file modifications by Git.

18. git diff
    - Purpose: Shows the differences between files in the working directory, staging area, and the last commit.
    - Use Case: To review changes before staging or committing.
    - Syntax:
      git diff
      git diff --staged
    - Example:
      git diff
      git diff --staged
      The first command shows changes in the working directory, while the second shows changes in the staging area.

19. git tag
    - Purpose: Creates a tag for a specific commit.
    - Use Case: To mark a specific point in the repository's history, such as a release.
    - Syntax:
      git tag <tag-name>
      git tag -a <tag-name> -m "Tag message"
    - Example:
      git tag v1.0.0
      git tag -a v1.0.0 -m "First release"

20. git rm
    - Purpose: Removes files from the working directory and staging area.
    - Use Case: To delete files and stop tracking them in Git.
    - Syntax:
      git rm <file>
      git rm -r <directory>
    - Example:
      git rm old-file.js
      git rm -r old-directory/

21. git blame
    - Purpose: Shows who made changes to each line of a file.
    - Use Case: To identify the author of specific changes.
    - Syntax:
      git blame <file>
    - Example:
      git blame src/App.js

22. git cherry-pick
    - Purpose: Applies a specific commit from one branch to another.
    - Use Case: To selectively apply changes from another branch.
    - Syntax:
      git cherry-pick <commit-hash>
    - Example:
      git cherry-pick 39f3e38

23. git archive
    - Purpose: Creates a compressed archive of the repository or a specific branch.
    - Use Case: To share or back up a specific version of the repository.
    - Syntax:
      git archive --format=zip --output=<file.zip> <branch>
    - Example:
      git archive --format=zip --output=project.zip main

24. git show
    - Purpose: Displays detailed information about a specific commit.
    - Use Case: To review the changes and metadata of a commit.
    - Syntax:
      git show <commit-hash>
    - Example:
      git show 39f3e38

### Easy Examples for Each Git Command

1. **git init**
   - Example:
     ```bash
     mkdir my-new-project
     cd my-new-project
     git init
     ```
     This initializes a new Git repository in the `my-new-project` folder.

2. **git add**
   - Example:
     ```bash
     git add index.html
     git add .
     ```
     The first command stages `index.html`, and the second stages all changes in the current directory.

3. **git commit**
   - Example:
     ```bash
     git commit -m "Initial commit"
     ```
     This saves the staged changes with the message "Initial commit."

4. **git status**
   - Example:
     ```bash
     git status
     ```
     This shows the current state of the working directory and staging area.

5. **git log**
   - Example:
     ```bash
     git log --oneline
     ```
     This displays a compact list of commits.

6. **git branch**
   - Example:
     ```bash
     git branch feature-login
     git branch
     ```
     The first command creates a new branch `feature-login`, and the second lists all branches.

7. **git checkout**
   - Example:
     ```bash
     git checkout feature-login
     ```
     This switches to the `feature-login` branch.

8. **git merge**
   - Example:
     ```bash
     git merge feature-login
     ```
     This merges the `feature-login` branch into the current branch.

9. **git remote**
   - Example:
     ```bash
     git remote add origin https://github.com/username/repo.git
     git remote -v
     ```
     The first command adds a remote repository, and the second lists all remotes.

10. **git push**
    - Example:
      ```bash
      git push origin main
      ```
      This pushes the `main` branch to the remote repository.

11. **git pull**
    - Example:
      ```bash
      git pull origin main
      ```
      This fetches and merges changes from the remote `main` branch.

12. **git clone**
    - Example:
      ```bash
      git clone https://github.com/username/repo.git
      ```
      This clones the repository to your local machine.

13. **git reset**
    - Example:
      ```bash
      git reset HEAD~1
      ```
      This undoes the last commit but keeps the changes in the working directory.

14. **git rebase**
    - Example:
      ```bash
      git rebase -i HEAD~2
      ```
      This interactively rebases the last two commits.

15. **git stash**
    - Example:
      ```bash
      git stash
      git stash apply
      ```
      The first command stashes uncommitted changes, and the second applies them back.

16. **git config --global core.autocrlf true**
    - Example:
      ```bash
      git config --global core.autocrlf true
      ```
      This ensures consistent line endings across different operating systems.

17. **git diff**
    - Example:
      ```bash
      git diff
      ```
      This shows the differences between the working directory and the staging area.

18. **git tag**
    - Example:
      ```bash
      git tag v1.0.0
      ```
      This creates a lightweight tag `v1.0.0` for the current commit.

19. **git rm**
    - Example:
      ```bash
      git rm old-file.js
      ```
      This removes `old-file.js` from the working directory and staging area.

20. **git blame**
    - Example:
      ```bash
      git blame src/App.js
      ```
      This shows who last modified each line in `src/App.js`.

21. **git cherry-pick**
    - Example:
      ```bash
      git cherry-pick 39f3e38
      ```
      This applies the commit `39f3e38` to the current branch.

22. **git archive**
    - Example:
      ```bash
      git archive --format=zip --output=project.zip main
      ```
      This creates a zip archive of the `main` branch.

23. **git show**
    - Example:
      ```bash
      git show 39f3e38
      ```
      This displays detailed information about the commit `39f3e38`.

---

### Directory Diagram

Here’s a simplified directory structure for your MERN Chat app project:

```
MERN chatapp/
├── backend/
│   └── server.js
├── data/
│   └── data.js
├── frontend/
│   ├── package.json
│   ├── README.md
│   ├── public/
│   │   ├── favicon.ico
│   │   ├── index.html
│   │   ├── logo192.png
│   │   ├── logo512.png
│   │   ├── manifest.json
│   │   └── robots.txt
│   └── src/
│       ├── App.css
│       ├── App.js
│       ├── index.css
│       ├── index.js
│       └── Pages/
│           ├── ChatPage.js
│           └── HomePage.js
├── package.json
└── project_data.txt
```

This diagram provides a clear view of the folder structure, making it easier to understand the organization of your project.

Learning Resources:
- Official Git Documentation: https://git-scm.com/doc
- Interactive Git Tutorials: https://learngitbranching.js.org/
- Pro Git Book: https://git-scm.com/book/en/v2

1. git remote add
   - Purpose: Links a local repository to a remote repository.
   - Use Case: To push or pull changes between the local and remote repositories.
   - Syntax:
     git remote add <name> <url>
   - Example:
     git remote add origin https://github.com/Naveen-Raj6/Mern-Auth.git